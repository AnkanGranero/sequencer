{"version":3,"sources":["components/sequencer.js","App.js","serviceWorker.js","index.js"],"names":["bass","Tone","Synth","toMaster","melody","harmony","bassNote","melodyNote","harmonyNote","allNotes","bassNotes","j","whatSit","sit","replace","Math","round","random","Sequencer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isPLaying","bpm","buttonText","event","setState","target","value","console","log","index","Transport","scheduleRepeat","context","resume","step","bassInputs","document","querySelector","concat","melodyInputs","harmonyInputs","checked","triggerAttackRelease","bind","cancel","start","arrOfTones","i","nr","floor","push","react_default","a","createElement","className","class","id","onClick","newBassLine","play","type","name","min","max","onChange","changeTempo","steps","Component","App","sequencer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a72c8420.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport Tone from 'tone';\n\n\nconst bass = new Tone.Synth().toMaster();\nconst melody = new Tone.Synth().toMaster();\nconst harmony = new Tone.Synth().toMaster();\n\nlet bassNote = \"C2\";\nlet melodyNote = \"E4\";\nlet harmonyNote = \"G2\";\nlet allNotes = [\"C\",\"D\",\"E\",\"F\",\"G\",\"A\",\"B\"]\nlet bassNotes = [\"C2\", \"G2\", \"A2\", \"F2\"];\nlet melodyNotes = [\"C4\",\"D4\",\"E4\",\"F4\",\"G4\",\"A4\",\"B4\"];\nlet harmonyNotes = [\"C3\",\"D3\",\"E3\",\"F3\",\"G3\",\"A3\",\"B3\"];\nlet j = 0;\n\n\n\nfunction whatSit (sit){\n let situation = sit.replace(/[^A-Za-z]/g, \"\");\n switch(situation){\n \n  case \"C\": return Math.round(Math.random())? \"E\" : \"G\" ;\n  case \"D\": return Math.round(Math.random())? \"F\" : \"A\" ;\n  case \"E\": return Math.round(Math.random())? \"G\" : \"B\" ;\n  case \"F\": return Math.round(Math.random())? \"A\" : \"C\" ;\n  case \"G\": return Math.round(Math.random())? \"B\" : \"D\" ;\n  case \"A\": return Math.round(Math.random())? \"C\" : \"E\" ;\n  case \"B\": return Math.round(Math.random())? \"D\" : \"F\" ;\n}\n}\n\n\n\n\n\n\nclass Sequencer extends Component {\n    constructor(props) {\n    super(props)\n  \n    this.state = {\n      isPLaying: false,\n      bpm: 120,\n      buttonText: \"PLAY\"\n    }\n  }\n  \n  changeTempo(event){\n  \n  \n  this.setState( {\n    bpm: event.target.value\n  })\n  \n  }\n  \n  play(){\n  \n  \n  \n    console.log(\"playing\")\n  \n  \n    let index = 0;\n    Tone.Transport.scheduleRepeat(repeat.bind(this), \"8n\");\n    \n    if(!this.state.isPLaying){\n      console.log(\"playing\");\n      this.setState({isPLaying: true})\n      Tone.Transport.start();\n      this.setState({buttonText: \"STOP\"});\n    }\n    else if(this.state.isPLaying){\n      console.log(\"stopped playing\");\n      this.setState({isPLaying: false})\n      Tone.Transport.cancel()\n      this.setState({buttonText: \"PLAY\"});\n      \n      \n    }\n\n \n\n  \n    \n    function repeat() {\n    \n      \n      \n      if (Tone.context.state !== 'running') {\n        Tone.context.resume();\n      }\n            \n            \n            \n            let step = index % 8;\n            let bassInputs = document.querySelector(`.bass input:nth-child(${step +1})`);\n            let melodyInputs = document.querySelector(`.melody input:nth-child(${step +1})`);\n            let harmonyInputs = document.querySelector(`.harmony input:nth-child(${step +1})`);\n  \n            Tone.Transport.bpm.value = this.state.bpm;\n\n            if( index == 64) {\n              index = 0\n            } \n\n            \n\n              console.log(\"vilken sit? \"+ whatSit(bassNote));\n\n               melodyNote = whatSit(bassNote) + 4;\n               console.log(\"melodyNote Ã¤r \"+ melodyNote)\n                 \n               harmonyNote = whatSit(melodyNote) + 3;\n                 console.log(harmonyNote)\n               \n             \n              \n              \n\n\n  \n  \n\n            if( index % 16 == 0) {\n            \n              bassNote = bassNotes[j++];\n              if (j > 3) {\n                j = 0\n              }\n             }\n  \n            if(bassInputs.checked) {\n              \n\n                bass.triggerAttackRelease(bassNote, \"8n\" );\n               \n                 \n            }\n            \n            if(melodyInputs.checked) {\n              \n              \n              melody.triggerAttackRelease(melodyNote, \"8n\" );\n            }\n\n\n            if(harmonyInputs.checked) {\n\n\n              harmony.triggerAttackRelease(harmonyNote, \"8n\");\n            }\n\n            index++;\n        }\n  \n  \n  }\n\n   newBassLine(){\n    \n     \n    let arrOfTones = [];\n   \n    for (var i = 0 ; i < 4; i) {\n    \n       let nr = Math.floor(Math.random() * 7);\n    \n       if ( allNotes[nr] + 2 !== arrOfTones[i-1]){\n       arrOfTones.push( (allNotes[nr]) + 2 )\n       i++;\n       console.log(\"We pushed a tone \" + nr)}\n       \n    } \n   \n   \n    \n   bassNotes = arrOfTones;\n  }\n  \n  render() {\n  \n\n\n  let buttonText = this.state.buttonText;\n  \n  let bpm = this.state.bpm;\n  \n    return (\n  \n  \n  \n    \n  <div className=\"wrapper\">\n  <div class=\"buttons\">\n  <button id=\"newBass\" onClick={this.newBassLine.bind(this)}>NEW BASSLINE</button>\n  <button id=\"play\" onClick={this.play.bind(this)}>{buttonText}</button>\n</div>\n\n  <div className=\"sideMenu\">\n  <li> BASS</li>\n  <li> MELODY</li>\n  <li>HARMONY</li>\n  \n  </div>\n  \n  <div className=\"bass\">\n          \n          <input type=\"checkbox\" index=\"1\"></input>\n          <input type=\"checkbox\" index=\"2\"></input>\n          <input type=\"checkbox\" index=\"3\"></input>\n          <input type=\"checkbox\" index=\"4\"></input>\n          <input type=\"checkbox\" index=\"5\"></input>\n          <input type=\"checkbox\" index=\"6\"></input>\n          <input type=\"checkbox\" index=\"7\"></input>\n          <input type=\"checkbox\" index=\"8\"></input>\n      </div>\n  \n      <div className=\"melody\">\n          <input type=\"checkbox\" index=\"1\"></input>\n          <input type=\"checkbox\" index=\"2\"></input>\n          <input type=\"checkbox\" index=\"3\"></input>\n          <input type=\"checkbox\" index=\"4\"></input>\n          <input type=\"checkbox\" index=\"5\"></input>\n          <input type=\"checkbox\" index=\"6\"></input>\n          <input type=\"checkbox\" index=\"7\"></input>\n          <input type=\"checkbox\" index=\"8\"></input>\n      </div>\n\n      <div className=\"harmony\">\n          <input type=\"checkbox\" index=\"1\"></input>\n          <input type=\"checkbox\" index=\"2\"></input>\n          <input type=\"checkbox\" index=\"3\"></input>\n          <input type=\"checkbox\" index=\"4\"></input>\n          <input type=\"checkbox\" index=\"5\"></input>\n          <input type=\"checkbox\" index=\"6\"></input>\n          <input type=\"checkbox\" index=\"7\"></input>\n          <input type=\"checkbox\" index=\"8\"></input>\n      </div>\n  \n   <div><input name=\"bpm\" id=\"bpm\" type=\"range\" min=\"30\" max=\"200\" value={this.state.bpm} onChange={this.changeTempo.bind(this)} steps=\"0.1\"></input>\n   <p>TEMPO: {bpm} BPM</p>\n   </div>\n  \n  </div>\n  \n    );\n  }\n  }\n\n\n  export default Sequencer","\nimport React, { Component} from 'react';\nimport './App.css';\n\nimport Sequencer from \"./components/sequencer\"\n\n\n\n\n\n\nclass App extends Component {\nconstructor(props){\n  super(props)\n}\nrender(){\n  return (\n    <Sequencer></Sequencer>\n  )\n}\n\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}